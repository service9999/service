import{expect as r}from"chai";import e from"@bitcoin-computer/bitcore-mnemonic-ltc";import"axios";import"crypto";import"crypto-js";import"eciesjs";import"@endo/static-module-record";const{CHAIN:o,NETWORK:t,BCN_URL:s,RPC_USER:a,RPC_PASSWORD:c,TEST_MNEMONICS:n}=process.env;function b(r){return{smartArgs:r.filter((r=>r._rev)),dumbArgs:r.map((r=>r._rev?"__":r))}}parseInt(process.env.BC_DUST_LIMIT||"",10),e.bitcore,parseInt(process.env.BC_DEFAULT_FEE||"",10),parseInt(process.env.BC_SCRIPT_CHUNK_SIZE||"",10),parseInt(process.env.MWEB_HEIGHT||"",10),e.bitcore,e.bitcore,e.bitcore,e.bitcore;const i=r=>(Object.prototype.toString.call(r).match(/\s([a-zA-Z]+)/)||[])[1];const m=r=>"object"==typeof r?i(r):i(r).toLowerCase();const p=r=>{if((r=>["number","string","boolean","undefined","Null"].includes(m(r)))(r))return r;if((r=>"Array"===m(r))(r))return r.map(p);if((r=>"Object"===m(r))(r)){const e=Object.keys(r).reduce(((e,o)=>(e[o]=p(r[o]),e)),{});const o=Object.create(Object.getPrototypeOf(r));return Object.assign(o,e)}throw new Error(`Unsupported data type for clone: ${m(r)}`)};function d(r,e){let o=0;return e.map((e=>"__"===e?r[o++]:e))}describe("helpers",(()=>{describe("splitArgs",(()=>{it("should work for an array of dumb objects",(()=>{r(b([{a:1},{b:2}])).to.deep.eq({dumbArgs:[{a:1},{b:2}],smartArgs:[]})})),it("should work for an array of smart objects",(()=>{r(b([{a:1,_rev:"rev1"},{b:2,_rev:"rev1"}])).to.deep.eq({dumbArgs:["__","__"],smartArgs:[{_rev:"rev1",a:1},{_rev:"rev1",b:2}]})})),it("should work for an array of smart objects",(()=>{r(b([{a:1},{b:2,_rev:"rev1"}])).to.deep.eq({dumbArgs:[{a:1},"__"],smartArgs:[{_rev:"rev1",b:2}]})}))})),describe("mergeArgs",(()=>{it("should work for an array of dumb objects",(()=>{const e=[{a:1}];const o=p(e);r(d(e,["__"])).to.deep.eq([{a:1}]),r(o).to.deep.eq(e)})),it("should work for an array of dumb objects",(()=>{const e=[{a:1},{b:2}];const{smartArgs:o,dumbArgs:t}=b(e);r(d(o,t)).to.deep.eq(e)})),it("should work for an array of smart objects",(()=>{const e=[{a:1,_rev:"rev0"},{b:2,_rev:"rev0"}];const{smartArgs:o,dumbArgs:t}=b(e);r(d(o,t)).to.deep.eq(e)})),it("should work for a mixed array of objects",(()=>{const e=[{a:1},{b:2,_rev:"rev0"}];const{smartArgs:o,dumbArgs:t}=b(e);r(d(o,t)).to.deep.eq(e)}))}))}));
